{"remainingRequest":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/cache-loader/dist/cjs.js??ref--1-0!/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/vue-loader/lib/index.js??ref--1-1!/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/docs/samples/README.md?vue&type=template&id=5322e6f9&","dependencies":[{"path":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/docs/samples/README.md","mtime":1627549830264},{"path":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/mnt/d/NJU/研究生/FLUID/fluid-website/fluid_vuepress1.x/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}